pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = '609862927287'
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'currency-exchange-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Docker Build') {
            steps {
                sh 'docker build -t currency-exchange-app:latest .'
                sh 'docker tag currency-exchange-app:latest ${DOCKER_IMAGE}'
            }
        }

        stage('Trivy Scan') {
            steps {
                sh 'trivy image --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}'
            }
        }

        stage('SonarQube & Unit Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh 'mvn test'
                    }
                }
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('sonar-server') {
                            sh 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }

        stage('ECR Login') {
            steps {
                sh '''
                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                '''
            }
        }

        stage('Push to ECR') {
            steps {
                sh 'docker push ${DOCKER_IMAGE}'
            }
        }

        stage('Deploy to Dev') {
            steps {
                sh '''
                sed "s|IMAGE_PLACEHOLDER|${DOCKER_IMAGE}|" k8s/dev/deployment.yaml | kubectl apply -f -
                '''
            }
        }

        stage('Approval for Prod') {
            steps {
                input message: 'Approve Production Deployment?'
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh '''
                sed "s|IMAGE_PLACEHOLDER|${DOCKER_IMAGE}|" k8s/prod/deployment.yaml | kubectl apply -f -
                '''
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed. Sending notifications...'
            // (Optional) SNS/Email notification integration goes here
        }
    }
}

